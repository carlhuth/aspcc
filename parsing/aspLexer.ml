# 1 "parsing/aspLexer.mll"
 


    open AspParser
    open Lexing

    exception LexingError of string

    type lexing_mode = VbScript | Html

    let mode = ref Html
    let keyword_table = Hashtbl.create 53
    let current_string = ref ""

    (* no longer needed, this bookkeeping travels with the lexbuf in new ocamllex *)

    let next_line lexbuf =
	    lexbuf.lex_curr_p <- {lexbuf.lex_curr_p with
		                          pos_bol = lexbuf.lex_curr_p.pos_cnum;
		                          pos_lnum = lexbuf.lex_curr_p.pos_lnum + 1}

    let int32_of_hexstring s =
	    (Int32.of_string ( 
		     "0x" ^
		     (String.sub s 2 ((String.length s) - 2))))

    let int32_of_octstring s =
	    (Int32.of_string ( 
		     "0o" ^
		     (String.sub s 2 ((String.length s) - 2))))

    (*let enter context =
	  match context with
	  | Html -> Asp.set_context "HTML"; mode := Html
	  | VbScript -> Asp.set_context "VbScript"; mode := VbScript*)

    let error position msg =
	    raise (LexingError (Printf.sprintf "Error '%s' on line %i" msg position.pos_lnum))
            
    let _ =
	    List.iter 
		    (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
		    [   
			    "and", AND;
			    "byref", BYREF;
			    "byval", BYVAL;
			    "call", CALL;
			    "case", CASE;
			    "class", CLASS;
			    "const", CONST;
			    "default", DEFAULT;
			    "dim", DIM;
			    "do", DO;
			    "each", EACH;
			    "else", ELSE;
			    "elseif", ELSEIF;
			    "end", END;
			    "eqv", EQV;
			    "erase", ERASE;
			    "error", ERROR;
			    "eval", EVAL;
			    "execute", EXECUTE;
			    "exit", EXIT;
			    "explicit", EXPLICIT;
			    "false", FALSE;
			    "for", FOR;
			    "function", FUNCTION;
			    "get", GET;
			    "goto", GOTO;
			    "if", IF;
			    "imp", IMP;
			    "in", IN;
		   (*	    "inherits", INHERITS; *)
                "is", IS;
			    "let", LET;
			    "loop", LOOP;
			    "mod", MOD;
			    "next", NEXT;
			    "new", NEW;
			    "not", NOT;
			    "nothing", NOTHING;
			    "null", NULL;
			    "on", ON;
			    "or", OR;
			    "option", OPTION;
			    "preserve", PRESERVE;
			    "private", PRIVATE;
			    "property", PROPERTY;
			    "public", PUBLIC;
			    "randomize", RANDOMIZE;
			    "redim", REDIM;
			    "resume", RESUME;
			    "select", SELECT;
			    "true", TRUE;
			    "set", SET;
			    "step", STEP;
			    "sub", SUB;
			    "then", THEN;
			    "to", TO;
			    "until", UNTIL;
			    "wend", WEND;
			    "while", WHILE;
			    "with", WITH;
			    "xor", XOR
			]
	        
(*	enter Html *)


# 130 "parsing/aspLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\001\000\005\000\006\000\004\000\002\000\249\255\250\255\
    \012\000\251\255\254\255\013\000\253\255\010\000\014\000\015\000\
    \013\000\019\000\255\255\020\000\018\000\022\000\001\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\002\000\027\000\031\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
    \001\000\002\000\000\000\000\000\001\000\000\000\001\000\032\000\
    \049\000\003\000\046\000\005\000\006\000\255\255\003\000\001\000\
    \110\000\010\000\075\000\226\000\066\000\250\255\248\255\247\255\
    \245\255\025\000\021\000\240\255\239\255\238\255\237\255\236\255\
    \235\255\024\000\192\000\229\255\228\255\235\000\029\000\043\000\
    \225\255\226\255\063\001\073\001\083\001\054\001\106\001\121\001\
    \241\255\246\255\242\255\041\000\046\000\193\000\077\000\082\000\
    \254\255\111\000\081\000\085\000\240\000\241\000\132\001\091\000\
    \103\000\254\255\112\000\102\000\116\000\133\001\003\001\095\000\
    \095\000\118\000\122\000\131\001\252\255";
  Lexing.lex_backtrk = 
   "\005\000\005\000\005\000\255\255\005\000\005\000\255\255\255\255\
    \003\000\255\255\255\255\255\255\255\255\005\000\255\255\255\255\
    \000\000\000\000\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\001\000\255\255\003\000\255\255\255\255\255\255\
    \255\255\011\000\012\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\021\000\024\000\255\255\255\255\028\000\029\000\029\000\
    \255\255\255\255\255\255\025\000\255\255\255\255\023\000\022\000\
    \255\255\255\255\255\255\002\000\002\000\255\255\001\000\001\000\
    \255\255\000\000\000\000\000\000\001\000\001\000\255\255\001\000\
    \001\000\255\255\000\000\000\000\000\000\255\255\255\255\001\000\
    \001\000\003\000\003\000\004\000\255\255";
  Lexing.lex_default = 
   "\001\000\001\000\001\000\001\000\255\255\255\255\000\000\000\000\
    \255\255\000\000\000\000\255\255\000\000\013\000\001\000\013\000\
    \255\255\255\255\000\000\019\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\049\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\058\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\058\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\101\000\101\000\101\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\101\000\115\000\255\255\
    \255\255\255\255\255\255\115\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\004\000\007\000\005\000\005\000\004\000\
    \255\255\007\000\005\000\255\255\016\000\011\000\011\000\017\000\
    \255\255\020\000\018\000\255\255\021\000\018\000\020\000\018\000\
    \018\000\021\000\039\000\002\000\031\000\050\000\013\000\009\000\
    \031\000\047\000\081\000\008\000\011\000\011\000\023\000\255\255\
    \019\000\030\000\052\000\255\255\019\000\081\000\012\000\050\000\
    \012\000\039\000\048\000\031\000\003\000\014\000\032\000\031\000\
    \047\000\014\000\032\000\026\000\053\000\024\000\015\000\012\000\
    \097\000\010\000\010\000\060\000\012\000\012\000\050\000\025\000\
    \029\000\048\000\088\000\049\000\027\000\094\000\090\000\089\000\
    \095\000\028\000\096\000\051\000\096\000\048\000\018\000\018\000\
    \084\000\046\000\060\000\035\000\038\000\039\000\047\000\085\000\
    \105\000\033\000\054\000\042\000\036\000\047\000\034\000\055\000\
    \093\000\105\000\043\000\018\000\044\000\037\000\045\000\060\000\
    \078\000\098\000\107\000\079\000\099\000\108\000\018\000\040\000\
    \084\000\018\000\018\000\116\000\116\000\000\000\000\000\085\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\060\000\041\000\
    \075\000\076\000\000\000\057\000\073\000\058\000\061\000\006\000\
    \071\000\067\000\063\000\068\000\062\000\069\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \009\000\000\000\065\000\064\000\066\000\000\000\000\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\000\000\070\000\255\255\072\000\059\000\255\255\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\000\000\000\000\059\000\091\000\000\000\082\000\092\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\103\000\103\000\000\000\104\000\104\000\255\255\
    \006\000\255\255\059\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\000\000\255\255\000\000\000\000\113\000\255\255\255\255\
    \114\000\000\000\000\000\000\000\255\255\102\000\109\000\000\000\
    \000\000\000\000\000\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\111\000\112\000\000\000\
    \000\000\000\000\000\000\000\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\000\000\000\000\
    \000\000\000\000\077\000\255\255\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\080\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\000\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \000\000\255\255\106\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\001\000\005\000\000\000\001\000\002\000\
    \003\000\004\000\002\000\003\000\013\000\008\000\011\000\013\000\
    \014\000\015\000\016\000\014\000\015\000\017\000\019\000\020\000\
    \021\000\019\000\039\000\000\000\030\000\049\000\002\000\003\000\
    \031\000\047\000\078\000\003\000\008\000\011\000\022\000\014\000\
    \015\000\023\000\051\000\014\000\015\000\079\000\091\000\050\000\
    \092\000\039\000\048\000\030\000\000\000\001\000\030\000\031\000\
    \047\000\002\000\031\000\025\000\052\000\022\000\013\000\029\000\
    \057\000\008\000\011\000\060\000\008\000\011\000\050\000\024\000\
    \028\000\048\000\066\000\048\000\026\000\058\000\065\000\065\000\
    \058\000\027\000\094\000\050\000\095\000\047\000\098\000\099\000\
    \073\000\045\000\060\000\034\000\037\000\038\000\055\000\073\000\
    \103\000\032\000\040\000\041\000\035\000\046\000\033\000\054\000\
    \058\000\104\000\042\000\107\000\043\000\036\000\044\000\056\000\
    \056\000\097\000\106\000\056\000\097\000\106\000\108\000\039\000\
    \073\000\111\000\112\000\113\000\114\000\255\255\255\255\073\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\056\000\039\000\
    \056\000\056\000\255\255\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\255\255\056\000\056\000\056\000\255\255\255\255\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\255\255\056\000\093\000\056\000\056\000\093\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\255\255\255\255\059\000\059\000\255\255\074\000\059\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\100\000\101\000\255\255\100\000\101\000\093\000\
    \000\000\001\000\059\000\049\000\255\255\002\000\003\000\255\255\
    \255\255\255\255\013\000\255\255\255\255\110\000\014\000\015\000\
    \110\000\255\255\255\255\255\255\019\000\100\000\101\000\255\255\
    \255\255\255\255\255\255\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\110\000\110\000\255\255\
    \255\255\255\255\255\255\255\255\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\255\255\255\255\
    \255\255\255\255\077\000\058\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\056\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\115\000\102\000\109\000\
    \115\000\102\000\109\000\255\255\084\000\084\000\084\000\084\000\
    \084\000\084\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\255\255\255\255\255\255\115\000\115\000\255\255\
    \255\255\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\255\255\084\000\084\000\084\000\084\000\
    \084\000\084\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \255\255\093\000\102\000\109\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\087\000\087\000\087\000\087\000\087\000\087\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \100\000\101\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\110\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\115\000\102\000\109\000";
  Lexing.lex_base_code = 
   "\000\000\001\000\002\000\006\000\000\000\000\000\000\000\001\000\
    \000\000\000\000\000\000\000\000\000\000\007\000\008\000\013\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\000\000\000\000\000\000\021\000\000\000\001\000\
    \001\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\018\000\020\000\025\000\000\000\
    \000\000\001\000\000\000\000\000\000\000\034\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code = 
   "\001\000\001\000\001\000\000\000\001\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\
    \000\000\000\000\000\000\000\000\001\000\001\000\000\000\001\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_default_code = 
   "\004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \007\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\007\000\010\000\000\000\
    \000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\039\000\000\000\001\000\002\000\000\000\001\000\002\000\
    \003\000\013\000\014\000\003\000\013\000\014\000\058\000\015\000\
    \093\000\058\000\015\000\093\000\100\000\255\255\101\000\100\000\
    \039\000\101\000\048\000\102\000\255\255\049\000\102\000\003\000\
    \056\000\014\000\255\255\003\000\109\000\014\000\015\000\109\000\
    \255\255\058\000\015\000\255\255\255\255\255\255\255\255\100\000\
    \255\255\101\000\255\255\255\255\000\000\001\000\002\000\255\255\
    \255\255\255\255\255\255\013\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\093\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\102\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \109\000\255\255\255\255\255\255\255\255\038\000\055\000\255\255\
    \255\255\255\255\255\255\255\255\046\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\001\000\002\000\049\000\255\255\255\255\003\000\013\000\
    \014\000\255\255\255\255\255\255\058\000\015\000\093\000\255\255\
    \255\255\255\255\100\000\255\255\101\000\255\255\255\255\255\255\
    \255\255\102\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\109\000";
  Lexing.lex_code = 
   "\255\000\001\255\001\255\255\004\255\255\005\255\255\006\255\007\
    \255\255\007\255\255\003\007\002\006\001\005\000\004\255";
}

let rec html mode lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_html_rec mode lexbuf 0
and __ocaml_lex_html_rec mode lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 138 "parsing/aspLexer.mll"
      (	
                (* Ignore the #! if it is there *)
                if Lexing.lexeme_start lexbuf = 0 then
				    (next_line lexbuf; ignore (lexeme lexbuf); html mode lexbuf)
			    else
				    (next_line lexbuf; HTML (lexeme lexbuf))
            )
# 488 "parsing/aspLexer.ml"

  | 1 ->
# 148 "parsing/aspLexer.mll"
            (
                mode := VbScript;
                INLINE_VALUE
            )
# 496 "parsing/aspLexer.ml"

  | 2 ->
# 155 "parsing/aspLexer.mll"
            ( ignore (asp_directive lexbuf); html mode lexbuf )
# 501 "parsing/aspLexer.ml"

  | 3 ->
# 161 "parsing/aspLexer.mll"
   ( mode := VbScript; HTML "" )
# 506 "parsing/aspLexer.ml"

  | 4 ->
# 164 "parsing/aspLexer.mll"
   ( html_bang_rule lexbuf )
# 511 "parsing/aspLexer.ml"

  | 5 ->

  let eol_option = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 179 "parsing/aspLexer.mll"
      (
                let s = lexeme lexbuf in
                if eol_option <> "" then next_line lexbuf;
                HTML s
            )
# 522 "parsing/aspLexer.ml"

  | 6 ->
# 185 "parsing/aspLexer.mll"
             ( EOF )
# 527 "parsing/aspLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_html_rec mode lexbuf __ocaml_lex_state

and html_bang_rule lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 8 (-1) ;   __ocaml_lex_html_bang_rule_rec lexbuf 22
and __ocaml_lex_html_bang_rule_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->

  let filename = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(3)
  and kind = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 194 "parsing/aspLexer.mll"
  ( SSI (kind, filename) )
# 541 "parsing/aspLexer.ml"

  | 1 ->
# 197 "parsing/aspLexer.mll"
      ( HTML "<!--" )
# 546 "parsing/aspLexer.ml"

  | 2 ->
# 200 "parsing/aspLexer.mll"
            ( HTML "<!DOCTYPE" )
# 551 "parsing/aspLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_html_bang_rule_rec lexbuf __ocaml_lex_state

and vbrule mode lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ;   __ocaml_lex_vbrule_rec mode lexbuf 56
and __ocaml_lex_vbrule_rec mode lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->

  let eol_option = Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 205 "parsing/aspLexer.mll"
      (
                mode := Html;
                if eol_option <> "" then next_line lexbuf;
                html mode lexbuf
            )
# 568 "parsing/aspLexer.ml"

  | 1 ->

  let comment = Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_mem.(0)
  and eol_option = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 214 "parsing/aspLexer.mll"
          (
                if eol_option <> "" then next_line lexbuf;
                COMMENT comment
            )
# 579 "parsing/aspLexer.ml"

  | 2 ->
# 220 "parsing/aspLexer.mll"
                  ( next_line lexbuf; vbrule mode lexbuf )
# 584 "parsing/aspLexer.ml"

  | 3 ->
# 223 "parsing/aspLexer.mll"
            ( vbrule mode lexbuf )
# 589 "parsing/aspLexer.ml"

  | 4 ->
# 226 "parsing/aspLexer.mll"
           ( COLON )
# 594 "parsing/aspLexer.ml"

  | 5 ->
# 228 "parsing/aspLexer.mll"
           ( L_PAREN )
# 599 "parsing/aspLexer.ml"

  | 6 ->
# 229 "parsing/aspLexer.mll"
           ( R_PAREN )
# 604 "parsing/aspLexer.ml"

  | 7 ->
# 231 "parsing/aspLexer.mll"
           ( DOT )
# 609 "parsing/aspLexer.ml"

  | 8 ->
# 232 "parsing/aspLexer.mll"
           ( COMMA )
# 614 "parsing/aspLexer.ml"

  | 9 ->
# 234 "parsing/aspLexer.mll"
           ( NOT_EQUALS )
# 619 "parsing/aspLexer.ml"

  | 10 ->
# 235 "parsing/aspLexer.mll"
           ( EQUALS )
# 624 "parsing/aspLexer.ml"

  | 11 ->
# 236 "parsing/aspLexer.mll"
           ( LESS )
# 629 "parsing/aspLexer.ml"

  | 12 ->
# 237 "parsing/aspLexer.mll"
           ( GREATER )
# 634 "parsing/aspLexer.ml"

  | 13 ->
# 238 "parsing/aspLexer.mll"
           ( LESS_EQUAL )
# 639 "parsing/aspLexer.ml"

  | 14 ->
# 239 "parsing/aspLexer.mll"
           ( GREATER_EQUAL )
# 644 "parsing/aspLexer.ml"

  | 15 ->
# 241 "parsing/aspLexer.mll"
           ( PLUS )
# 649 "parsing/aspLexer.ml"

  | 16 ->
# 242 "parsing/aspLexer.mll"
           ( MINUS )
# 654 "parsing/aspLexer.ml"

  | 17 ->
# 243 "parsing/aspLexer.mll"
           ( DIV )
# 659 "parsing/aspLexer.ml"

  | 18 ->
# 244 "parsing/aspLexer.mll"
           ( INTDIV )
# 664 "parsing/aspLexer.ml"

  | 19 ->
# 245 "parsing/aspLexer.mll"
           ( MULT )
# 669 "parsing/aspLexer.ml"

  | 20 ->
# 246 "parsing/aspLexer.mll"
           ( EXP )
# 674 "parsing/aspLexer.ml"

  | 21 ->
# 247 "parsing/aspLexer.mll"
           ( CONCAT )
# 679 "parsing/aspLexer.ml"

  | 22 ->
# 251 "parsing/aspLexer.mll"
  ( HEX (int32_of_hexstring (lexeme lexbuf)) )
# 684 "parsing/aspLexer.ml"

  | 23 ->
# 254 "parsing/aspLexer.mll"
  ( OCT (int32_of_octstring (lexeme lexbuf)) )
# 689 "parsing/aspLexer.ml"

  | 24 ->
# 256 "parsing/aspLexer.mll"
                               ( INT (Int32.of_string (lexeme lexbuf)) )
# 694 "parsing/aspLexer.ml"

  | 25 ->
# 257 "parsing/aspLexer.mll"
                               ( FLOAT (float_of_string (lexeme lexbuf)) )
# 699 "parsing/aspLexer.ml"

  | 26 ->
# 258 "parsing/aspLexer.mll"
                               ( STRING (stringrule "" '"' lexbuf) )
# 704 "parsing/aspLexer.ml"

  | 27 ->
# 262 "parsing/aspLexer.mll"
                               ( STRING (stringrule "" '#' lexbuf) )
# 709 "parsing/aspLexer.ml"

  | 28 ->
# 267 "parsing/aspLexer.mll"
  (  
			let id = lexeme lexbuf in
            try
				Hashtbl.find keyword_table (String.lowercase id)
			with
				| Not_found -> IDENT (Symbol.of_string id)
        )
# 720 "parsing/aspLexer.ml"

  | 29 ->
# 276 "parsing/aspLexer.mll"
          ( next_line lexbuf; EOL )
# 725 "parsing/aspLexer.ml"

  | 30 ->
# 279 "parsing/aspLexer.mll"
        ( EOF )
# 730 "parsing/aspLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_vbrule_rec mode lexbuf __ocaml_lex_state

and asp_directive lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_asp_directive_rec lexbuf 100
and __ocaml_lex_asp_directive_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 283 "parsing/aspLexer.mll"
                ( () )
# 743 "parsing/aspLexer.ml"

  | 1 ->

  let eol_option = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 285 "parsing/aspLexer.mll"
      (
                if eol_option <> "" then next_line lexbuf;
                asp_directive lexbuf
            )
# 753 "parsing/aspLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_asp_directive_rec lexbuf __ocaml_lex_state

and stringrule prefix delimiter lexbuf =
    __ocaml_lex_stringrule_rec prefix delimiter lexbuf 110
and __ocaml_lex_stringrule_rec prefix delimiter lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->

  let escaped_delim = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 293 "parsing/aspLexer.mll"
              (
                  if delimiter = escaped_delim.[0] then
                      stringrule (prefix ^ (String.make 1 delimiter)) delimiter lexbuf
                  else
                      stringrule (prefix ^ escaped_delim) delimiter lexbuf
              )
# 771 "parsing/aspLexer.ml"

  | 1 ->

  let maybe_delim = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 301 "parsing/aspLexer.mll"
   (
                if delimiter = maybe_delim then
                    prefix
                else
                    stringrule (prefix ^ (String.make 1 maybe_delim)) delimiter  lexbuf
            )
# 783 "parsing/aspLexer.ml"

  | 2 ->
# 307 "parsing/aspLexer.mll"
           ( error lexbuf.lex_curr_p "eof in string" )
# 788 "parsing/aspLexer.ml"

  | 3 ->
# 308 "parsing/aspLexer.mll"
           ( error lexbuf.lex_curr_p "eol in string" )
# 793 "parsing/aspLexer.ml"

  | 4 ->
# 309 "parsing/aspLexer.mll"
                             ( stringrule (prefix ^ (lexeme lexbuf)) delimiter lexbuf )
# 798 "parsing/aspLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_stringrule_rec prefix delimiter lexbuf __ocaml_lex_state

;;

# 311 "parsing/aspLexer.mll"
              
                (* To accomodate the multi-mode thing, here we go: *)
                (*let token mode lexbuf =
	              match !mode with
	              | Html ->			html mode lexbuf
	              | VbScript ->		vbrule mode lexbuf
                (*	| AspDirective ->	asp_directive lexbuf *)
                (*	| SsiDirective ->	ssi_directive lexbuf *)
                *)
                
                let token mode =
	                let m = ref mode in
	                (fun lexbuf ->
                         try
		                     match !m with
		                         | Html ->			html m lexbuf
		                         | VbScript ->		vbrule m lexbuf
                         with
                             | e -> 
                                   Printf.eprintf "Lexing error in %s mode %s line %i : %s"
                                   (match !m with Html -> "HTML" | VbScript -> "VbScript")
                                   lexbuf.lex_curr_p.pos_fname
                                   lexbuf.lex_curr_p.pos_lnum
                                   (Printexc.to_string e); exit 1)
                    
            
# 831 "parsing/aspLexer.ml"
